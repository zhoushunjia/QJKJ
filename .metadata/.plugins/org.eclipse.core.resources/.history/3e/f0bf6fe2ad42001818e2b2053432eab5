el .indicator_7 li{width:30px;height:12px;background:#ccc;border-radius:0px}.wqdCarousel .indicator_7 li.active{width:30px;height:12px;background-color:#9bdcff;border-radius:0px}.cellBox .indicator_3,.cellBox .indicator_7{top:20px}.wqdCarousel .indicator_1 li.active,.wqdCarousel .indicator_2 li:not(.active),.wqdCarousel .indicator_0 li:not(.active){background-color:transparent !important}.wqdCarousel .indicator_3 li,.wqdCarousel .indicator_4 li,.wqdCarousel .indicator_5 li,.wqdCarousel .indicator_6 li,.wqdCarousel .indicator_7 li{border:none !important}@media (max-width: 767px){.wqdCarousel .indicator_0 li,.wqdCarousel .indicator_1 li,.wqdCarousel .indicator_3 li,.wqdCarousel .indicator_0 li.active,.wqdCarousel .indicator_1 li.active,.wqdCarousel .indicator_3 li.active{width:10px;height:10px}.wqdCarousel .indicator_4 li.active,.wqdCarousel .indicator_5 li.active,.wqdCarousel .indicator_4 li{width:20px;height:20px;text-align:center}.wqdCarousel .indicator_5 li{width:20px;height:20px;text-align:center;border-radius:4px}.wqdCarousel .indicator_5 li.active{border-radius:4px}.wqdCarousel .indicator_4 li span,.wqdCarousel .indicator_5 li span{line-height:19px}}.controlBox .carousel-control.left{left:10%}.controlBox .carousel-control.right{right:10%}.wqdCarousel .carousel-control_1{border-radius:100px}.wqdCarousel .carousel-control_2{border-radius:5px}.wqdCarousel .carousel-control_3{border-radius:0px}.wqdCarousel .carousel-control_4{border-radius:0px 100px 100px 0px}.wqdCarousel .carousel-control_4.right{border-radius:100px 0px 0px 100px}.cellBox .carousel-control_5,.cellBox .carousel-control_6{width:36px;height:74px;border-radius:5px;line-height:74px;margin-top:-37px;padding:0}.wqdelementEdit .carousel-control_5{width:36px;height:74px;border-radius:5px;line-height:74px;margin-top:-37px;padding:0}.wqdelementEdit .carousel-control_6{height:74px;margin-top:0;border-radius:0;position:absolute;background:none;padding:0;width:36px;background-color:transparent !important}.cellBox .carousel-control_6{height:74px}.cellBox .carousel-control.left,.cellBox .carousel-control.right{background-image:none;background-color:#ccc}.cellBox .carousel-control_6{top:50%;margin-top:-37px}.cellBox .carousel-control_6.left{background-color:transparent}.wqdelementEdit .carousel-control_6.left{left:0 !important;background-color:none}.wqdelementEdit .carousel-control_6.right{right:0 !important}.cellBox .carousel-control_6.right{right:10%}.carouselBtnWrap a.carousel-control_1.right,.carouselBtnWrap a.carousel-control_2.right,.carouselBtnWrap a.carousel-control_3.right,.carouselBtnWrap a.carousel-control_4.right,.carouselBtnWrap a.carousel-control_5.right,.carouselBtnWrap a.carousel-control_6.right{background-color:#9bdcff}.controlBoxDiv .carousel-control_5 svg:not(:root),.controlBoxDiv .carousel-control_6 svg:not(:root){position:absolute;width:15px;top:50%;margin-top:-24px;right:30%}.wqdelementEdit .carousel-control_5 svg:not(:root),.wqdelementEdit .carousel-control_6 svg:not(:root){position:static;margin-top:0;width:15px}.wqdCarousel .carousel-control.left,.wqdCarousel .carousel-control.right{z-index:51;background-image:none;opacity:1}.carouselBtnWrap>li.controlBox{height:auto;overflow:hidden;padding-top:18px}.cellBox .carousel-control_6.right{background:url(../../images/v2/design/elementEdit/Carousel/ttbg.png) no-repeat}.cellBox .carousel-control{opacity:1}.wqdelementEdit[data-elementtype='hoverContainer']{background:transparent}.wqdelementEdit[data-elementtype='hoverContainer']:hover{z-index:10000 !important}.hc-fixed{z-index:998 !important}.wqdNavTemplate.wqdNavAuto{width:auto !important;height:auto !important}.wqdNavTemplate.wqdNavAuto .wqdelementEditBox{position:relative !important}.navTemplateWrap1{position:relative;display:inline-block;vertical-align:top;background-color:#2dbce6;overflow:hidden}.navTemplateWrap1 a{color:#fff}.navTemplateWrap1 .navTop_list{position:relative;z-index:1;font-size:0;white-space:nowrap}.navTemplateWrap1 .navTop_list li{display:inline-block;font-size:16px}.navTemplateWrap1 .navTop_list li a{display:inline-block;padding:13px 24px}.navTemplateWrap1 .navTop_list li:hover a,.navTemplateWrap1 .navTop_list li.active a{color:#fff !important}.template1_mask{position:absolute;z-index:0;left:0;top:0;width:80px;height:100%;background-color:#186379}.wqdNavTemplate.wqdNavAuto{width:auto !important;height:auto !important}.wqdNavTemplate.wqdNavAuto .wqdelementEditBox{position:relative !important}.navTemplateWrap2{display:inline-block;vertical-align:top;overflow:hidden}.navTemplateWrap2 a{color:#fff}.navTemplateWrap2 .navTop_list{font-size:0;white-space:nowrap}.navTemplateWrap2 .navTop_list li{position:relative;display:inline-block;font-size:16px}.navTemplateWrap2 .navTop_list li a{display:inline-block;padding:15px 30px;border-bottom:4px solid;-webkit-transition-property:top,-webkit-transform;-moz-transition-property:top,-moz-transform;transition-property:top,transform;-webkit-transition-duration:0.5s;-moz-transition-duration:0.5s;transition-duration:0.5s}.navTemplateWrap2 .navTop_list li a.a_bottom{background-color:#00afff;border-color:#009dca}.navTemplateWrap2 .navTop_list li a.a_top{position:absolute;width:100%;top:-100%;height:100%;background-color:#fabd00;border-color:#f39322}.navTemplateWrap2 .navTop_list li.active .a_top,.navTemplateWrap2 .navTop_list li:hover .a_top{top:0}.navTemplateWrap2 .navTop_list li.active .a_bottom,.navTemplateWrap2 .navTop_list li:hover .a_bottom{-webkit-transform:translate3d(0, 100%, 0);-moz-transform:translate3d(0, 100%, 0);transform:translate3d(0, 100%, 0)}.navTemplateWrap3 a{color:#777}.navTemplateWrap3 .navTop_list{font-size:0;white-space:nowrap}.navTemplateWrap3 .navTop_list>li{position:relative;display:inline-block;border-radius:8px;font-size:16px;background-color:#fff;margin:0 3px 0 25px}.navTemplateWrap3 .navTop_list>li:last-child{margin-right:25px}.navTemplateWrap3 .navTop_list>li:hover{background-color:#F4F7F9 !important}.navTemplateWrap3 .navTop_list>li:hover>a{color:#444 !important}.navTemplateWrap3 .navTop_list>li.active{z-index:2;background-color:#333 !important}.navTemplateWrap3 .navTop_list>li.active>a{color:#fff !important}.navTemplateWrap3 .navTop_list>li>a{display:inline-block;padding:10px 24px}.navTemplateWrap3 .navTop_list>li:before,.navTemplateWrap3 .navTop_list>li:after{position:absolute;z-index:-1;content:" ";height:100%;width:44px;background-color:inherit}.navTemplateWrap3 .navTop_list>li:before{border-top-left-radius:8px;left:-12px;-webkit-transform:skew(-30deg, 0deg);-moz-transform:skew(-30deg, 0deg);transform:skew(-30deg, 0deg)}.navTemplateWrap3 .navTop_list>li:after{box-shadow:rgba(0,0,0,0.1) 3px -2px 5px,inset rgba(255,255,255,0.09) -1px 0;border-top-right-radius:8px;right:-12px;-webkit-transform:skew(30deg, 0deg);-moz-transform:skew(30deg, 0deg);transform:skew(30deg, 0deg)}.search-box{width:100%;min-width:140px;height:100%;border:1px solid #ccc;border-radius:20px;background:#fff;overflow:hidden}.search-box .search-input{float:left;width:70%;height:100%;margin-left:20px;padding:5px 0;border:0}.search-box .s-box{float:right;width:16%;height:100%;border:0;position:relative}.search-box .s-box svg{position:absolute;height:55%;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);fill:#9a9a9a}.search-box:hover{border-color:#ffc400}.search-box:hover{border-color:#ffc400}.search-box:hover svg{fill:#ffc400}.modDetlInfo .shopInfo-nav ul li{float:left;width:100px;height:40px;line-height:40px;font-size:12px;text-align:center;border-top:1px solid #dcdcdc;border-left:1px solid #dcdcdc;cursor:pointer}.modDetlInfo .shopInfo-nav ul li:last-of-type{border-right:1px solid #dcdcdc}.modDetlInfo .shopInfo-nav ul li.on{border-top:2px solid #ea000b}.modDetlInfo .shopInfo-cont{width:100%;font-size:12px;color:#666;border:1px solid #dcdcdc}.modDetlInfo .shopInfo-cont ul{width:84%;margin:51px auto}.modDetlInfo .shopInfo-cont ul li{float:left;width:25%;line-height:20px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding:0 10px}.commodityList{border:0px solid #dcdcdc}.commodityList a{color:#333}.commodityList>li{margin-bottom:10px}.commodityList>li:last-child{margin-bot;
      }
      if (e.type === DOMSCROLL) {
        if (direction === DOWN && e.originalEvent.detail > 0 || direction === UP && e.originalEvent.detail < 0) {
          e.preventDefault();
        }
      } else if (e.type === MOUSEWHEEL) {
        if (!e.originalEvent || !e.originalEvent.wheelDelta) {
          return;
        }
        if (direction === DOWN && e.originalEvent.wheelDelta < 0 || direction === UP && e.originalEvent.wheelDelta > 0) {
          e.preventDefault();
        }
      }
    };


    /**
      Enable iOS native scrolling
      @method nativeScrolling
      @private
     */

    NanoScroll.prototype.nativeScrolling = function() {
      this.$content.css({
        WebkitOverflowScrolling: 'touch'
      });
      this.iOSNativeScrolling = true;
      this.isActive = true;
    };


    /**
      Updates those nanoScroller properties that
      are related to current scrollbar position.
      @method updateScrollValues
      @private
     */

    NanoScroll.prototype.updateScrollValues = function() {
      var content, direction;
      content = this.content;
      this.maxScrollTop = content.scrollHeight - content.clientHeight;
      this.prevScrollTop = this.contentScrollTop || 0;
      this.contentScrollTop = content.scrollTop;
      direction = this.contentScrollTop > this.previousPosition ? "down" : this.contentScrollTop < this.previousPosition ? "up" : "same";
      this.previousPosition = this.contentScrollTop;
      if (direction !== "same") {
        this.$el.trigger('update', {
          position: this.contentScrollTop,
          maximum: this.maxScrollTop,
          direction: direction
        });
      }
      if (!this.iOSNativeScrolling) {
        this.maxSliderTop = this.paneHeight - this.sliderHeight;
        this.sliderTop = this.maxScrollTop === 0 ? 0 : this.contentScrollTop * this.maxSliderTop / this.maxScrollTop;
      }
    };


    /**
      Updates CSS styles for current scroll position.
      Uses CSS 2d transfroms and `window.requestAnimationFrame` if available.
      @method setOnScrollStyles
      @private
     */

    NanoScroll.prototype.setOnScrollStyles = function() {
      var cssValue;
      if (hasTransform) {
        cssValue = {};
        cssValue[transform] = "translate(0, " + this.sliderTop + "px)";
      } else {
        cssValue = {
          top: this.sliderTop
        };
      }
      if (rAF) {
        if (cAF && this.scrollRAF) {
          cAF(this.scrollRAF);
        }
        this.scrollRAF = rAF((function(_this) {
          return function() {
            _this.scrollRAF = null;
            return _this.slider.css(cssValue);
          };
        })(this));
      } else {
        this.slider.css(cssValue);
      }
    };


    /**
      Creates event related methods
      @method createEvents
      @private
     */

    NanoScroll.prototype.createEvents = function() {
      this.events = {
        down: (function(_this) {
          return function(e) {
            _this.isBeingDragged = true;
            _this.offsetY = e.pageY - _this.slider.offset().top;
            if (!_this.slider.is(e.target)) {
              _this.offsetY = 0;
            }
            _this.pane.addClass('active');
            _this.doc.bind(MOUSEMOVE, _this.events[DRAG]).bind(MOUSEUP, _this.events[UP]);
            _this.body.bind(MOUSEENTER, _this.events[ENTER]);
            return false;
          };
        })(this),
        drag: (function(_this) {
          return function(e) {
            _this.sliderY = e.pageY - _this.$el.offset().top - _this.paneTop - (_this.offsetY || _this.sliderHeight * 0.5);
            _this.scroll();
            if (_this.contentScrollTop >= _this.maxScrollTop && _this.prevScrollTop !== _this.maxScrollTop) {
              _this.$el.trigger('scrollend');
            } else if (_this.contentScrollTop === 0 && _this.prevScrollTop !== 0) {
              _this.$el.trigger('scrolltop');
            }
            return false;
          };
        })(this),
        up: (function(_this) {
          return function(e) {
            _this.isBeingDragged = false;
            _this.pane.removeClass('active');
            _this.doc.unbind(MOUSEMOVE, _this.events[DRAG]).unbind(MOUSEUP, _this.events[UP]);
            _this.body.unbind(MOUSEENTER, _this.events[ENTER]);
            return false;
          };
        })(this),
        resize: (function(_this) {
          return function(e) {
            _this.reset();
          };
        })(this),
        panedown: (function(_this) {
          return function(e) {
            _this.sliderY = (e.offsetY || e.originalEvent.layerY) - (_this.sliderHeight * 0.5);
            _this.scroll();
            _this.events.down(e);
            return false;
          };
        })(this),
        scroll: (function(_this) {
          return function(e) {
            _this.updateScrollValues();
            if (_this.isBeingDragged) {
              return;
            }
            if (!_this.iOSNativeScrolling) {
              _this.sliderY = _this.sliderTop;
              _this.setOnScrollStyles();
            }
            if (e == null) {
              return;
            }
            if (_this.contentScrollTop >= _this.maxScrollTop) {
              if (_this.options.preventPageScrolling) {
                _this.preventScrolling(e, DOWN);
              }
              if (_this.prevScrollTop !== _this.maxScrollTop) {
                _this.$el.trigger('scrollend');
              }
            } else if (_this.contentScrollTop === 0) {
              if (_this.options.preventPageScrolling) {
                _this.preventScrolling(e, UP);
              }
              if (_this.prevScrollTop !== 0) {
                _this.$el.trigger('scrolltop');
              }
            }
          };
        })(this),
        wheel: (function(_this) {
          return function(e) {
            var delta;
            if (e == null) {
              return;
            }
            delta = e.delta || e.wheelDelta || (e.originalEvent && e.originalEvent.wheelDelta) || -e.detail || (e.originalEvent && -e.originalEvent.detail);
            if (delta) {
              _this.sliderY += -delta / 3;
            }
            _this.scroll();
            return false;
          };
        })(this),
        enter: (function(_this) {
          return function(e) {
            var _ref;
            if (!_this.isBeingDragged) {
              return;
            }
            if ((e.buttons || e.which) !== 1) {
              return (_ref = _this.events)[UP].apply(_ref, arguments);
            }
          };
        })(this)
      };
    };


    /**
      Adds event listeners with jQuery.
      @method addEvents
      @private
     */

    NanoScroll.prototype.addEvents = function() {
      var events;
      this.removeEvents();
      events = this.events;
      if (!this.options.disableResize) {
        this.win.bind(RESIZE, events[RESIZE]);
      }
      if (!this.iOSNativeScrolling) {
        this.slider.bind(MOUSEDOWN, events[DOWN]);
        this.pane.bind(MOUSEDOWN, events[PANEDOWN]).bind("" + MOUSEWHEEL + " " + DOMSCROLL, events[WHEEL]);
      }
      this.$content.bind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
    };


    /**
      Removes event listeners with jQuery.
      @method removeEvents
      @private
     */

    NanoScroll.prototype.removeEvents = function() {
      var events;
      events = this.events;
      this.win.unbind(RESIZE, events[RESIZE]);
      if (!this.iOSNativeScrolling) {
        this.slider.unbind();
        this.pane.unbind();
      }
      this.$content.unbind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
    };


    /**
      Generates nanoScroller's scrollbar and elements for it.
      @method generate
      @chainable
      @private
     */

    NanoScroll.prototype.generate = function() {
      var contentClass, cssRule, currentPadding, options, pane, paneClass, sliderClass;
      options = this.options;
      paneClass = options.paneClass, sliderClass = options.sliderClass, contentClass = options.contentClass;
      if (!(pane = this.$el.children("." + paneClass)).length && !pane.children("." + sliderClass).length) {
        this.$el.append("<div class=\"" + paneClass + "\"><div class=\"" + sliderClass + "\" /></div>");
      }
      this.pane = this.$el.children("." + paneClass);
      this.slider = this.pane.find("." + sliderClass);
      if (BROWSER_SCROLLBAR_WIDTH === 0 && isFFWithBuggyScrollbar()) {
        currentPadding = window.getComputedStyle(this.content, null).getPropertyValue('padding-right').replace(/[^0-9.]+/g, '');
        cssRule = {
          right: -14,
          paddingRight: +currentPadding + 14
        };
      } else if (BROWSER_SCROLLBAR_WIDTH) {
        cssRule = {
          right: -BROWSER_SCROLLBAR_WIDTH
        };
        this.$el.addClass('has-scrollbar');
      }
      if (cssRule != null) {
        this.$content.css(cssRule);
      }
      return this;
    };


    /**
      @method restore
      @private
     */

    NanoScroll.prototype.restore = function() {
      this.stopped = false;
      if (!this.iOSNativeScrolling) {
        this.pane.show();
      }
      this.addEvents();
    };


    /**
      Resets nanoScroller's scrollbar.
      @method reset
      @chainable
      @example
          $(".nano").nanoScroller();
     */

    NanoScroll.prototype.reset = function() {
      var content, contentHeight, contentPosition, contentStyle, contentStyleOverflowY, paneBottom, paneHeight, paneOuterHeight, paneTop, parentMaxHeight, right, sliderHeight;
      if (this.iOSNativeScrolling) {
        this.contentHeight = this.content.scrollHeight;
        return;
      }
      if (!this.$el.find("." + this.options.paneClass).length) {
        this.generate().stop();
      }
      if (this.stopped) {
        this.restore();
      }
      content = this.content;
      contentStyle = content.style;
      contentStyleOverflowY = contentStyle.overflowY;
      if (BROWSER_IS_IE7) {
        this.$content.css({
          height: this.$content.height()
        });
      }
      contentHeight = content.scrollHeight + BROWSER_SCROLLBAR_WIDTH;
      parentMaxHeight = parseInt(this.$el.css("max-height"), 10);
      if (parentMaxHeight > 0) {
        this.$el.height("");
        this.$el.height(content.scrollHeight > parentMaxHeight ? parentMaxHeight : content.scrollHeight);
      }
      paneHeight = this.pane.outerHeight(false);
      paneTop = parseInt(this.pane.css('top'), 10);
      paneBottom = parseInt(this.pane.css('bottom'), 10);
      paneOuterHeight = paneHeight + paneTop + paneBottom;
      sliderHeight = Math.round(paneOuterHeight / contentHeight * paneOuterHeight);
      if (sliderHeight < this.options.sliderMinHeight) {
        sliderHeight = this.options.sliderMinHeight;
      } else if ((this.options.sliderMaxHeight != null) && sliderHeight > this.options.sliderMaxHeight) {
        sliderHeight = this.options.sliderMaxHeight;
      }
      if (contentStyleOverflowY === SCROLL && contentStyle.overflowX !== SCROLL) {
        sliderHeight += BROWSER_SCROLLBAR_WIDTH;
      }
      this.maxSliderTop = paneOuterHeight - sliderHeight;
      this.contentHeight = contentHeight;
      this.paneHeight = paneHeight;
      this.paneOuterHeight = paneOuterHeight;
      this.sliderHeight = sliderHeight;
      this.paneTop = paneTop;
      this.slider.height(sliderHeight);
      this.events.scroll();
      this.pane.show();
      this.isActive = true;
      if ((content.scrollHeight === content.clientHeight) || (this.pane.outerHeight(true) >= content.scrollHeight && contentStyleOverflowY !== SCROLL)) {
        this.pane.hide();
        this.isActive = false;
      } else if (this.el.clientHeight === content.scrollHeight && contentStyleOverflowY === SCROLL) {
        this.slider.hide();
      } else {
        this.slider.show();
      }
      this.pane.css({
        opacity: (this.options.alwaysVisible ? 1 : ''),
        visibility: (this.options.alwaysVisible ? 'visible' : '')
      });
      contentPosition = this.$content.css('position');
      if (contentPosition === 'static' || contentPosition === 'relative') {
        right = parseInt(this.$content.css('right'), 10);
        if (right) {
          this.$content.css({
            right: '',
            marginRight: right
          });
        }
      }
      return this;
    };


    /**
      @method scroll
      @private
      @example
          $(".nano").nanoScroller({ scroll: 'top' });
     */

    NanoScroll.prototype.scroll = function() {
      if (!this.isActive) {
        return;
      }
      this.sliderY = Math.max(0, this.sliderY);
      this.sliderY = Math.min(this.maxSliderTop, this.sliderY);
      this.$content.scrollTop(this.maxScrollTop * this.sliderY / this.maxSliderTop);
      if (!this.iOSNativeScrolling) {
        this.updateScrollValues();
        this.setOnScrollStyles();
      }
      return this;
    };


    /**
      Scroll at the bottom with an offset value
      @method scrollBottom
      @param offsetY {Number}
      @chainable
      @example
          $(".nano").nanoScroller({ scrollBottom: value });
     */

    NanoScroll.prototype.scrollBottom = function(offsetY) {
      if (!this.isActive) {
        return;
      }
      this.$content.scrollTop(this.contentHeight - this.$content.height() - offsetY).trigger(MOUSEWHEEL);
      this.stop().restore();
      return this;
    };


    /**
      Scroll at the top with an offset value
      @method scrollTop
      @param offsetY {Number}
      @chainable
      @example
          $(".nano").nanoScroller({ scrollTop: value });
     */

    NanoScroll.prototype.scrollTop = function(offsetY) {
      if (!this.isActive) {
        return;
      }
      this.$content.scrollTop(+offsetY).trigger(MOUSEWHEEL);
      this.stop().restore();
      return this;
    };


    /**
      Scroll to an element
      @method scrollTo
      @param node {Node} A node to scroll to.
      @chainable
      @example
          $(".nano").nanoScroller({ scrollTo: $('#a_node') });
     */

    NanoScroll.prototype.scrollTo = function(node) {
      if (!this.isActive) {
        return;
      }
      this.scrollTop(this.$el.find(node).get(0).offsetTop);
      return this;
    };


    /**
      To stop the operation.
      This option will tell the plugin to disable all event bindings and hide the gadget scrollbar from the UI.
      @method stop
      @chainable
      @example
          $(".nano").nanoScroller({ stop: true });
     */

    NanoScroll.prototype.stop = function() {
      if (cAF && this.scrollRAF) {
        cAF(this.scrollRAF);
        this.scrollRAF = null;
      }
      this.stopped = true;
      this.removeEvents();
      if (!this.iOSNativeScrolling) {
        this.pane.hide();
      }
      return this;
    };


    /**
      Destroys nanoScroller and restores browser's native scrollbar.
      @method destroy
      @chainable
      @example
          $(".nano").nanoScroller({ destroy: true });
     */

    NanoScroll.prototype.destroy = function() {
      if (!this.stopped) {
        this.stop();
      }
      if (!this.iOSNativeScrolling && this.pane.length) {
        this.pane.remove();
      }
      if (BROWSER_IS_IE7) {
        this.$content.height('');
      }
      this.$content.removeAttr('tabindex');
      if (this.$el.hasClass('has-scrollbar')) {
        this.$el.removeClass('has-scrollbar');
        this.$content.css({
          right: ''
        });
      }
      return this;
    };


    /**
      To flash the scrollbar gadget for an amount of time defined in plugin settings (defaults to 1,5s).
      Useful if you want to show the user (e.g. on pageload) that there is more content waiting for him.
      @method flash
      @chainable
      @example
          $(".nano").nanoScroller({ flash: true });
     */

    NanoScroll.prototype.flash = function() {
      if (this.iOSNativeScrolling) {
        return;
      }
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.pane.addClass('flashed');
      setTimeout((function(_this) {
        return function() {
          _this.pane.removeClass('flashed');
        };
      })(this), this.options.flashDelay);
      return this;
    };

    return NanoScroll;

  })();
  $.fn.nanoScroller = function(settings) {
    return this.each(function() {
      var options, scrollbar;
      if (!(scrollbar = this.nanoscroller)) {
        options = $.extend({}, defaults, settings);
        this.nanoscroller = scrollbar = new NanoScroll(this, options);
      }
      if (settings && typeof settings === "object") {
        $.extend(scrollbar.options, settings);
        if (settings.scrollBottom != null) {
          return scrollbar.scrollBottom(settings.scrollBottom);
        }
        if (settings.scrollTop != null) {
          return scrollbar.scrollTop(settings.scrollTop);
        }
        if (settings.scrollTo) {
          return scrollbar.scrollTo(settings.scrollTo);
        }
        if (settings.scroll === 'bottom') {
          return scrollbar.scrollBottom(0);
        }
        if (settings.scroll === 'top') {
          return scrollbar.scrollTop(0);
        }
        if (settings.scroll && settings.scroll instanceof $) {
          return scrollbar.scrollTo(settings.scroll);
        }
        if (settings.stop) {
          return scrollbar.stop();
        }
        if (settings.destroy) {
          return scrollbar.destroy();
        }
        if (settings.flash) {
          return scrollbar.flash();
        }
      }
      return scrollbar.reset();
    });
  };
  $.fn.nanoScroller.Constructor = NanoScroll;
})(jQuery, window, document);
