jd3Pb?$wAKLI6AcgVn`qoY0uO2s-Z@F$PN3BW>pHpGMKlNr4*mDn_fdm2ncu&rzy;
zl|+=KonP5!f()I$WG<N>vY}+|^LA7YslhTJ5-(nl>5a26V`DvoUN6%|+YI%bWf8__
zSs*-3p$GV^^<%Z<u=Y-bOh>aH0?!Wy7D01S#P)s6MOlC0FQk^x(mx9(p#!%S+}`L+
z8_vSqd>K_l9*?GVU7r!zK2!|N&dl2V1%h6V(OQPYLNjYLoSLta5s<58OK3%OmRC^t
znxhgb6Pi>L3#u&gD<&&fd-gT6ah2h+967nb!P0ha;J~aZ*1{Th7|S(QoTf!$^b!1J
zW+8^TF=Nypm}v=6i{+Gors0X7#Mc?HK~unW_H73njg7YiQmUO)j)~%i5|k^Q1k}c%
zW^(}tfe`PNcb-SzTWp_@j}Es=dnT3M^y#ou@O3@Xs2gkC8tQ&4_{J)sE)vDE68-qB
zABO~JIe{*^aH<)O3Z3;;j_!*i1eMSe5LEet^~c0O!YM5v`#<r4j)c<qQLuw=LpN$^
z(T|tH%!eZwcG@zS(lW*{02co}DH90)Av-TLgrto2eso6vQ~h=gtE#WGMdmL>oN*2B
zzd(pOB7Zz0->xcY3UPqaaCB;7ScU(yiP;sWyAvq_&<g~X-5bO-%hMPVTxyhZd%6YK
zlBOvA83zVmmPN~#+cZUyp2p_dx-|475&pEZ*=ruR$Kirf2GK|p{7#?mhwln_uYM=n
z@fj<JQOBoVMqS<|!pridF~)Hr>WuSG{4gRLYaG$6Rr%<%E>7#k`i;;p#n2s@w7pIc
z4`kzFDZw8L4CPV^Qn)fa;jj?m1F^Usl2UeL2b@fWwSLh}IX+taD)K~`4=EbJdVsGZ
zMQ6mWKzrVFF6^_(J(c)QFRyx*T3450xM)SQ*{B#MZUveOx<wWzW0KY`A?b5z6gxFq
z-B%|Oa63zpbY$Nhs;h%`kHN~njzqoytUyjb?fP<v=Qo&<Oo5lc#Nd+lJu&kKeOzlU
z&V+X0XL8&}#xIH+CP}kQFA56=b7kCU2xx82av(5Y%7m@oky(Y;YEp%PPODp=B3_|m
z><Y&r4oAhDl8Z${*0+P0DcqFLndQ|K{rZ{`Z~N7w^-$HKHLSNy33_dyxc#MG0`@0?
z)su5YN4qs7znz1h(nAdFJvvU!7=p!8hF<+#S*NEh+f@!?rALOkU`5F?)(n@P5;_lj
z%D<}eU{eLCk$T7lH*K!ItaS_k%ld{Z+ftiIQ;tRZlIsAKdgIZ#43kS5q(Lb%+od@w
zU8=4yqd)UlXBORSKNrVRnzkyKnGxY5Y0rp^&AXsPamYaIAoK)%SL%^yZm779Hqi_6
zRitoZs>=z%CZo_;@*(rk6s5(bQcIPL^r6y_)3=;L9?pzRLE*lu-7qr+5q6&wETsY`
z{pIbYEnIs#6b~H&)zy!jO2g|)pSh3nQ$(Tzf?MlMtRaL2umv9v_1|TA!Q~MH&c<LF
zo|nEBE`xAf9$%m#VCA3rV6i>nbd%pdkm>UEOPcO3mZRzn<8aojR&rzpu!EF;yNDtr
zB|=)23`6OBbzZH6OaCYa2&yJ>g1U4U)`x~|)bgR3^BwIV>dY(;CkSN`nJ#0#5@l`i
z=nR(Q3jz7@IU)R+6w7ERqhNSIi1gaN;^%vWovf~EkEDM7%i>@A&gQTJ>pD;}2j#Hn
zc2{p$W-CGgaCZl2?Vy0qOCkTT;45sIe9;v+z~>#9B^N^h?68?+WVICQlYRCl8Eiiy
zw>XDHnG>-9ho-}xV0|uFb2&PvvSd=fK4ynreEi5m_sCnM%T(sB%XMCv4#*k^1MPVM
zNS8D35jg-ATn{}x@w7|kuBJ>&;(~tRbJ=TpeEgAiuc>l)P=vER<eCcJp@@#&#B7ff
z^LkJ{rz;w$7^H(jW(R+7dm<&art!o}9NWTrHw#zX@FNIWY6_|hYvS{MegJpkN%@h9
zM!luF6@;k%*9s0W2=q$|Gmy(GvaO(rt-!>#wuPkTt{R)08(Xvqeg{9?QYKN}%U2cX
z_<ZpN8=$!s;rAKG{XGw$G~hol-;nPr2_nJu-1>J3DhuY71;CCByo}>gt)w^TrXnFI
z(wT`Fi;ksz9&gnA+O`C+LULkjZLid<Vo6_<RjK+hUx^^ERQT<1ok1Hk(X8r?keZ4(
z{saQ-40hf>w}SsA%;6Vk7AL#>PRo3B205Z|frbm)!wD@>2Ss$^4a<T1=bZv#CIm7H
zdy)uF3$4(-scK58HC%z6{{}|#QQHu&P}kz5y-7=XmfM|bEiV)wyr>RQ)i<;z64c*f
zPWu603b15){w(ZioN78s6VvZ#kjjh%!PKy-w(lp48CbO&zef;i?1DYT&TVtURXwk`
zqzr!*juf1x-T16;&AQVKO06naz_BXvgsUA;JFF}c>)nY6g%%R8s@W5jZ{iaamy#!<
z@@*v+=;=}Zf*+=k1tH9&=!Z`DXrRp+=jfI0PxWy$Ur&!Lhv(+Ud1cC_@zg@g7I1b2
z;f(vL1_A3?=}N^2u18}QjaZGnyAJ!~m$)w-?o-78{kOyYa<RBZ_ARM>%I`z@EZeH4
ziTQX@H<K@xp0=7*q5XJ^<syXKr58sKM}{G<jGEkPuF14}aa)})C{vv=-)nt-HWY8g
zA{i^1+<Y&mM!jtQ3#KdKDYiXif8zi2ONdMoj8A#|)4r_5^=*K@96V{G1=7F1wEA-@
zE-nQ5fG74x8?o?9pbfAQ!jR?LW$-FIoAu(Gm5RE7;sB=GNRuVw-E$N)LiK4S)elW)
zt^-95=y*`g8fC|lIrnQJrj=Z=`KYL;^@nBZFeF9PK;+?lMiiI-NhB6vDnK-c$S9Xj
zB8fx!#ieyhcV?R#bJ@;m;T&57_l=J2+!;%(h<Q(#Y^zZ<jiKnL1&xro5^qYGYAFDh
zmR;81c5fW#mHy%^g3ni(@U*_Tu}ek<3P8;XF8fXT@}EO!_4XLI@4XcUh+_eAkku2A
z#s^$Ud!8?aFc<-9+cM8JF>0HeX_%4}+p*y&aZv^>GzPV#a6<wiWauwza*6))RUH%g
zjxQE8CiU){M9SP0-x4xB^j*8jG?j0t<K9@boa%+Zzb61l(gek>sIcn$;+v0B$B+WZ
zlQU|XVVZh7!`&bVG3}<Nq5X*wsW|@Ga#oWf>1pF#Z7>lx^T|ju-`!?q3I<7NIF9Mh
zOZ)42eW<wtA1jdB(siNEWLE(60Bq#qWQ<V;AUq(fgOFxEHi<OD1d$n-QZa&0K2{9Q
z%T1!utLIYu!L0dX!+02?r9)1OF<fkmee&RHYJjGH6W##Mz7?&UMgzFiSU}JDVic5-
zvobi4Fr}nj&MuY(8tu86oL0A>y|}W)C(WX5%Gqfo@7WQAT2wT;=mN?<F~JuZJ9R$T
z^2_M)9D|V67Nsirs0X&*?l|c_6L^TL1_Ubi`5ol!?FBr})tRd`?ga)xtIXOq)TBf8
zSVn+mlXN_xMS`~E7*ir8y`ApkI5bs+!)NPaq;#k{UMM{>OZshC)#Ck5`QYSbC`<P5
zY%zuoxi*Tkbt2QbX<3uM*(Z{-d<@SBwzT&aA0Ubmm2Qzr0Z;T6t}d2GDz};DDzpOm
z1b>r!{;wnt=k+8U=V!zg-fOKQ_(>hc7sM=__ScI3=B<(1w7eD%nQ~mkw?ulMc1m|`
zwq4K-6+pj!R7Cd2@HJ>|o<x+vIy8MW^=c<;Fw9fm{j}FQ2JHBRX!{GkSbfrTqPXIZ
zu>|2Fl9f9=b$)EIsURpkq0Bw-!+A5-HB-i^7bCG0;mlNQ$qKsE=T>-Pc}rGe>#fbR
zU>04085QWlqH{$w;1TttI?b#Db^A$6LA#@}gDa?CcF9)WVJM!k*`qVrB<5SPGiAen
zb%|%hDnLgva%s{sCBixMoIO6cOBIxy=;k!32wq@wRmh|;wiHzgl~5xo41v-2o*2E?
zn?k8u9!WJJOt}iQRoBAg@HN~KAvt1#&oV*vRcZCYy*X^;#c3*`l<Hs}Q*g`VIY*2E
zuM0mkl3hwkmE)B+RU#g*Y!e-$tzLhf5T!U)Z7p2oC|OKma?8;(<OyDM(WWmVWCUll
zqABev6k{>!PucTkBP6y;n_ltam_;~MMEXb`0GL7`Y2C01@6IUeB$|@+)?!A@2GI|7
za>9pEYAvx4H8;i*543tRR)y<O?jqd~|9c;@eCJZiU^#k}z+A}C-Y!en^=;QA{C~Pw
zr!$aK6ypU_45MkTBx5%M^!wZ=Q!}hW>l)z);AI<G4p?|ChEU&1KrXgsTw+w~g$i;S
zOpH{lra<w5p5GI#gCsbNjwtb9_44$3Z+N-Ijjw3Y>NwO9m#<h8{$Lklx_$3n*ISBo
zv(Rub5?n^XPd{h70io961j3W<$_8>h#?0fas0Os^$=A4SMOVpH;!O<4h%~E&xIvNe
zf|BBPer!@Sry&5l_Q^<Rrd5BhFQ;_tR*<wb8Ofg1kV;|umx@*6Y*n)QS@Yc#hojSt
zKRlTJAO3gIeZp>Lf>I=0Fks7KsqbDRoK^ZXr6r_Hm2uQ%*7>EED*F@SEsd@LN~|d!
zsMmepHmH19swjqIQYxriP&#Q<I=#RnKE_hQiI-GMS{b_^cfNKm{+!Iy@bzUL^IES7
z)`0mT+gyBC>q1eI)F8k%f}OCAD<pVz>nG$)4AaF<zu*I#C&&z(Xw+S|=F@a0f~~4n
zNz&%zfm)xX8?qI|i`RHxvD$`wy?Vc_ercA%9%c*1%ch1cItJ7!m)pony$+SXQLX8w
z2|TpMr7ATPrw5iM6ft2xLjoUEj(#nHzM_K=EHm0c8KV|U5d5+ne%1#}?N7vr#1O`3
z?{73_38gBDsdf}d>`ZtjF80Fa`kjM!X$e?=fnsnEjwRq2(+P7QQeswD0R&JGh!z;E
zL@lLjBT8p4AokG0GA!fk&TRe;=OtR*3u_M_Ntq2+OG6d%P_@{C6O1}nxU|0#4L`}b
zdj*Y7%1sPug!6#W(_PgXbd<q_hdB{{NT&aRwHqIzkkl#wN=4OF@h_(frJa<zx7(Zp
zts<WZ1)k)905M%(w=G=k$iWGQOo<PrfWrVI;+M$uNkRf*1huL1J$6j=s#gnb_iX&B
z!M@R&eQp<XEf9~lr3i;Cgfn0`rK!HpO+<eO&hU(zd`0X-{>B$$8+ufe=Z!tPdz3}6
z*RAW`8i^gb47&%KG4_1;E|jl3Q+QaWNTj^Q=W?+;Rd`g}xu2!++|QA;pkSNZ3#I@v
zq|1<^?&Dv;v{Fkttc-!y%y$ZNXi-pNFwa=9v=RzVuN+Icq3N2~;@<JVCmb|swLr&4
z@sRKW*eN}AoisI*LWZ9%mIF#{l*XP5lu2@glvGNO0Ef`3^0HgHgW`B1dkRa{N(__w
z3k0R(?#WA3v2|@>g^mA+7vTGN>m^#d|3bT*x$IKUgjQp8@Fm`)6pl)iQ-c6urBVgH
zoZCLGBo;vf$yChqR^#WFDrT$o?^e!M9czE9sL1W}3E;R?DO-2(Nrg|vQmE}Z)(r4n
ztf(+-GBfP7(}J{@q2EY+t}f?D<>#p=pt_!{hVHiIKoef!O?v}x+*(`(w~CHSw;FU8
z^LvK_hB{8_n)_3>DW7yA=QF9(#+R@!MZMpkx8S$Ra=mx<4EOw)suPW2Zz;Z*Yjy?S
zq#$fKBn~``dNeix*sP`ef<86aoPwcyhXy#>!AaG@FqKXU4~;m|yNlKGl|^_v{a~6y
zr-+`8gqWx-<wxuc6`aMk5b8R>aCufDUV&+2?7LpM$4straM!_`btZR3MvPg5qG;Uw
zSZSGFEUvv&aW(m66)uX6l7C_p<&V;6lT$J_hpRNsBz|#*L*NmrQjSWfTfrAKO}pK_
z*hj{Ga%S#i?gC{Jk4`mDJH4wi9J1&L#VET#lFLfAjqR$k280MQrx@sK2!Yt$%Jzy!
z!cLQw<aKGi9Rgj6K3ziQ^~FWe$6O~4na~qC7fwIry9QTDoyzIK?AvZvl0BASeBl&_
zP=rQGI03I(o^LpHWKfhM)S@uhf?U*6Zmmt5L0QP@bPa&b3rLXr!SaHzi~WE&Qm@PV
zw*6ACtyg@P?6x{RGw0Gh5q%91lb1TQ`4R@O517q-qXP!8OL@;A(9CJ^md*;jL(N;)
z@I=P{R<VQH6Y>EhmJF1njM#Xra_l>1PMHUv4ZQHO57^)?73S-EB&g>;<cdW!8}OW+
zN~Oh(xluRyh3B+`&4yztXqd=5fLK!cD>b~z&f&6|q8CSea>&^!=p`zpuMtIQRb{@G
zvt#(mb@tjyb8~_gzolC0M5A)S9F|`r2)XXp(B|ozu`9M^qONXK6h;_ch>)F1B7|uF
zb>pbM3XVW+J5D*6-XIidh1)wCA<Qci_gk2DaH$j89Sx(^|2^)-Sr5Lhk{CBPyQ65y
zMI4@*Jv&AqhXXS1_#y@{t2eSp$**&jwkiEJS%Gq%9mkX~yovRSO6v7pUN=8O+^a!d
z#ZsX^Y>hw#zA^`wV^VyHq6G&^5M>;8_aSyg=+bP!6&j~7YLPgT(}B>@`9PySUtA4p
z5|f(#s8x*<`FUo}%;8A40{&tyKx?x|>(ghpk9nAY9<nv!KuR3!s?cIBXcog0po{?U
zRtz$-Ma0zlQ^{kX)fOo2&uF;@0h)Z&-&Yl=*B2{r?{MlIEPD0-%tKPdDMhwILZzYl
zdNowme7HG2Ihocxw&NWfps!K3*HJ9FZsKzA+qPeXVx+cHF9XcnnnWFZLdI5tuj?5p
zSiHbmW|aXK%7<(a;#9;%S#r+hX|mC%S%B`8P>A?xL|mzYhmZ0)-lwu#(u)Ivuk?QO
zAD7#DdvWb4Ec!VD37iThhYv6Q9fb&Mo%L>p_-pQt%EMb8??{=e)9JO5{+PSF>d6H}
zn2f6MSxB~1(WaJ{RD${v6H#Dwr#(HK1nJ9UzX1uDPEHSbG3al>*hX7|A@xzL@y{tT
z3-Z!z;{{WUt?Uku58)yT|CJSPpTwi9{5o6KAxxvTOL<XWlBZcXktjA+-U|AUeAfXq
zb;qDyeG)ySDMuRz6>QnadG%XOh|rcS2F*&;R)s$5vr>{?mb46EIYWrH+Br+C_JGJr
zoj2kEbxTt1(>I%Cr*}vpU!ER#wtOI$LN>ZO7iC=rDJjhKJN~^5q3jw^AMWj70SL|>
zq&3D2O2KrAA&{~8C0Km~>`a@zFz6=@6~UyhrP(L$t|Va9$*-}=Sc2%^;=07>By~B>
zH`ZIL%7Kg{!drzjiBI<YXwR@a7KDn>C10y+(jwsI0RNSiAClcn@6&NqvqLj!ymg9@
z!6*tsO3-e-P8Ql@3(^NtQU7EtD0C`uBdlu1SjN<4DZk_zOoY{^7AEkdPtQ!8%4aK|
zwbE#>bSuRVu4W_-0^040+whpmW)91pV%HE<&<k+?e(&N)ZPeLRwGVuE;DFH@q7KF}
z9he%2Li=xAIC|QS`+(OCpH~i>PU~azG!ERe)P|kqUoku7`_Sq`1-bpg`z~Sh-GSlX
zZuVv4Kc_`c7xTq}O{EVPKVwI?$|AHHg#Rv?geo}w0(DP1dz{F8%1O*Z-lE8;W{CrT
zP`LM2Nhi_5RSU5kKSza@QLAuQsp)_W)lanGLYWUFKfM)(=Zf_qc`2Vob}^h@zgi}g
zKjP<Gjv#SD!ne>4FSh=y!`*9_hambD0cZ0_y2qbd6O<T5u3#a`wV@sA4--e(Gh+X`
z%G*}i^t{O7{R;g9auwybxs*)lda{8}e)v0$FAqpZU@{thskNwKr}_I+A5+=YR_}Ho
zZGCqeW+et}4a_De%GcziV&SY*ma4iKvdje~`@hA`Bj{IFhuo;VC3Qy%zwLTtY2@Z9
zr013{q!hJZ4fw>G&=em4Savi?D9LJ272!)wie7lZS-lG>OU!wBZJniuESCr;`z$t6
zP+88K3bdgexL6|aYUPx*2`vR+lRnXAR(S(AA}>|P<mmK+oJ?um+VCd|O1GcE`j#Hq
zZhrtGkrm?zH-fhfks+;qN$x3NUY)E_=2L_rY&nK>ol1)e)SfC_^*gvwLT?n7*Tkdp
zGlwmpO4ti0Twc)>C<uT!no4`_Kj$>D6X>VT%m?PyG&;XNj@7es5+tg~WDQjHNTOF|
z_Ik_nFHzIhr&lity;*U|@LW_jQ5BjXn|R6lP#W=Hmqcf==jM-|Ze8=pw|og)-Q0xH
zD%#%xvd-3#Z8lx}GTutZaLdZ|ZNY5<3>hqy3{H#CV+s!_0oV?FW6whRY;`r4j+<i8
zQ7g~+rTJC*O)uG)Td4^pC>0bTM#0J-nQU6A_I_Pd5uzD#s7O!@9WtzfXh+FD*0Us6
zb3n(?BII^eU(%Eb%8uebapp/static/js/plugins/codemirror/mode/tiddlywiki/tiddlywiki.css b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiddlywiki/tiddlywiki.css
new file mode 100644
index 0000000000000000000000000000000000000000..9a69b639f8a71389a99dacb03bd03e4bb2a57ded
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiddlywiki/tiddlywiki.css
@@ -0,0 +1,14 @@
+span.cm-underlined {
+  text-decoration: underline;
+}
+span.cm-strikethrough {
+  text-decoration: line-through;
+}
+span.cm-brace {
+  color: #170;
+  font-weight: bold;
+}
+span.cm-table {
+  color: blue;
+  font-weight: bold;
+}
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiddlywiki/tiddlywiki.js b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiddlywiki/tiddlywiki.js
new file mode 100644
index 0000000000000000000000000000000000000000..88c9768a72701fba114cc0df066cf78a8730ed4c
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiddlywiki/tiddlywiki.js
@@ -0,0 +1,369 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+/***
+    |''Name''|tiddlywiki.js|
+    |''Description''|Enables TiddlyWikiy syntax highlighting using CodeMirror|
+    |''Author''|PMario|
+    |''Version''|0.1.7|
+    |''Status''|''stable''|
+    |''Source''|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|
+    |''Documentation''|http://codemirror.tiddlyspace.com/|
+    |''License''|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|
+    |''CoreVersion''|2.5.0|
+    |''Requires''|codemirror.js|
+    |''Keywords''|syntax highlighting color code mirror codemirror|
+    ! Info
+    CoreVersion parameter is needed for TiddlyWiki only!
+***/
+//{{{
+
+(function(mod) {
+  if (typeof exports == "object" && typeof module == "object") // CommonJS
+    mod(require("../../lib/codemirror"));
+  else if (typeof define == "function" && define.amd) // AMD
+    define(["../../lib/codemirror"], mod);
+  else // Plain browser env
+    mod(CodeMirror);
+})(function(CodeMirror) {
+"use strict";
+
+CodeMirror.defineMode("tiddlywiki", function () {
+  // Tokenizer
+  var textwords = {};
+
+  var keywords = function () {
+    function kw(type) {
+      return { type: type, style: "macro"};
+    }
+    return {
+      "allTags": kw('allTags'), "closeAll": kw('closeAll'), "list": kw('list'),
+      "newJournal": kw('newJournal'), "newTiddler": kw('newTiddler'),
+      "permaview": kw('permaview'), "saveChanges": kw('saveChanges'),
+      "search": kw('search'), "slider": kw('slider'),   "tabs": kw('tabs'),
+      "tag": kw('tag'), "tagging": kw('tagging'),       "tags": kw('tags'),
+      "tiddler": kw('tiddler'), "timeline": kw('timeline'),
+      "today": kw('today'), "version": kw('version'),   "option": kw('option'),
+
+      "with": kw('with'),
+      "filter": kw('filter')
+    };
+  }();
+
+  var isSpaceName = /[\w_\-]/i,
+  reHR = /^\-\-\-\-+$/,                                 // <hr>
+  reWikiCommentStart = /^\/\*\*\*$/,            // /***
+  reWikiCommentStop = /^\*\*\*\/$/,             // ***/
+  reBlockQuote = /^<<<$/,
+
+  reJsCodeStart = /^\/\/\{\{\{$/,                       // //{{{ js block start
+  reJsCodeStop = /^\/\/\}\}\}$/,                        // //}}} js stop
+  reXmlCodeStart = /^<!--\{\{\{-->$/,           // xml block start
+  reXmlCodeStop = /^<!--\}\}\}-->$/,            // xml stop
+
+  reCodeBlockStart = /^\{\{\{$/,                        // {{{ TW text div block start
+  reCodeBlockStop = /^\}\}\}$/,                 // }}} TW text stop
+
+  reUntilCodeStop = /.*?\}\}\}/;
+
+  function chain(stream, state, f) {
+    state.tokenize = f;
+    return f(stream, state);
+  }
+
+  // Used as scratch variables to communicate multiple values without
+  // consing up tons of objects.
+  var type, content;
+
+  function ret(tp, style, cont) {
+    type = tp;
+    content = cont;
+    return style;
+  }
+
+  function jsTokenBase(stream, state) {
+    var sol = stream.sol(), ch;
+
+    state.block = false;        // indicates the start of a code block.
+
+    ch = stream.peek();         // don't eat, to make matching simpler
+
+    // check start of  blocks
+    if (sol && /[<\/\*{}\-]/.test(ch)) {
+      if (stream.match(reCodeBlockStart)) {
+        state.block = true;
+        return chain(stream, state, twTokenCode);
+      }
+      if (stream.match(reBlockQuote)) {
+        return ret('quote', 'quote');
+      }
+      if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop)) {
+        return ret('code', 'comment');
+      }
+      if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop)) {
+        return ret('code', 'comment');
+      }
+      if (stream.match(reHR)) {
+        return ret('hr', 'hr');
+      }
+    } // sol
+    ch = stream.next();
+
+    if (sol && /[\/\*!#;:>|]/.test(ch)) {
+      if (ch == "!") { // tw header
+        stream.skipToEnd();
+        return ret("header", "header");
+      }
+      if (ch == "*") { // tw list
+        stream.eatWhile('*');
+        return ret("list", "comment");
+      }
+      if (ch == "#") { // tw numbered list
+        stream.eatWhile('#');
+        return ret("list", "comment");
+      }
+      if (ch == ";") { // definition list, term
+        stream.eatWhile(';');
+        return ret("list", "comment");
+      }
+      if (ch == ":") { // definition list, description
+        stream.eatWhile(':');
+        return ret("list", "comment");
+      }
+      if (ch == ">") { // single line quote
+        stream.eatWhile(">");
+        return ret("quote", "quote");
+      }
+      if (ch == '|') {
+        return ret('table', 'header');
+      }
+    }
+
+    if (ch == '{' && stream.match(/\{\{/)) {
+      return chain(stream, state, twTokenCode);
+    }
+
+    // rudimentary html:// file:// link matching. TW knows much more ...
+    if (/[hf]/i.test(ch)) {
+      if (/[ti]/i.test(stream.peek()) && stream.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i)) {
+        return ret("link", "link");
+      }
+    }
+    // just a little string indicator, don't want to have the whole string covered
+    if (ch == '"') {
+      return ret('string', 'string');
+    }
+    if (ch == '~') {    // _no_ CamelCase indicator should be bold
+      return ret('text', 'brace');
+    }
+    if (/[\[\]]/.test(ch)) { // check for [[..]]
+      if (stream.peek() == ch) {
+        stream.next();
+        return ret('brace', 'brace');
+      }
+    }
+    if (ch == "@") {    // check for space link. TODO fix @@...@@ highlighting
+      stream.eatWhile(isSpaceName);
+      return ret("link", "link");
+    }
+    if (/\d/.test(ch)) {        // numbers
+      stream.eatWhile(/\d/);
+      return ret("number", "number");
+    }
+    if (ch == "/") { // tw invisible comment
+      if (stream.eat("%")) {
+        return chain(stream, state, twTokenComment);
+      }
+      else if (stream.eat("/")) { //
+        return chain(stream, state, twTokenEm);
+      }
+    }
+    if (ch == "_") { // tw underline
+      if (stream.eat("_")) {
+        return chain(stream, state, twTokenUnderline);
+      }
+    }
+    // strikethrough and mdash handling
+    if (ch == "-") {
+      if (stream.eat("-")) {
+        // if strikethrough looks ugly, change CSS.
+        if (stream.peek() != ' ')
+          return chain(stream, state, twTokenStrike);
+        // mdash
+        if (stream.peek() == ' ')
+          return ret('text', 'brace');
+      }
+    }
+    if (ch == "'") { // tw bold
+      if (stream.eat("'")) {
+        return chain(stream, state, twTokenStrong);
+      }
+    }
+    if (ch == "<") { // tw macro
+      if (stream.eat("<")) {
+        return chain(stream, state, twTokenMacro);
+      }
+    }
+    else {
+      return ret(ch);
+    }
+
+    // core macro handling
+    stream.eatWhile(/[\w\$_]/);
+    var word = stream.current(),
+    known = textwords.propertyIsEnumerable(word) && textwords[word];
+
+    return known ? ret(known.type, known.style, word) : ret("text", null, word);
+
+  } // jsTokenBase()
+
+  // tw invisible comment
+  function twTokenComment(stream, state) {
+    var maybeEnd = false,
+    ch;
+    while (ch = stream.next()) {
+      if (ch == "/" && maybeEnd) {
+        state.tokenize = jsTokenBase;
+        break;
+      }
+      maybeEnd = (ch == "%");
+    }
+    return ret("comment", "comment");
+  }
+
+  // tw strong / bold
+  function twTokenStrong(stream, state) {
+    var maybeEnd = false,
+    ch;
+    while (ch = stream.next()) {
+      if (ch == "'" && maybeEnd) {
+        state.tokenize = jsTokenBase;
+        break;
+      }
+      maybeEnd = (ch == "'");
+    }
+    return ret("text", "strong");
+  }
+
+  // tw code
+  function twTokenCode(stream, state) {
+    var ch, sb = state.block;
+
+    if (sb && stream.current()) {
+      return ret("code", "comment");
+    }
+
+    if (!sb && stream.match(reUntilCodeStop)) {
+      state.tokenize = jsTokenBase;
+      return ret("code", "comment");
+    }
+
+    if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
+      state.tokenize = jsTokenBase;
+      return ret("code", "comment");
+    }
+
+    ch = stream.next();
+    return (sb) ? ret("code", "comment") : ret("code", "comment");
+  }
+
+  // tw em / italic
+  function twTokenEm(stream, state) {
+    var maybeEnd = false,
+    ch;
+    while (ch = stream.next()) {
+      if (ch == "/" && maybeEnd) {
+        state.tokenize = jsTokenBase;
+        break;
+      }
+      maybeEnd = (ch == "/");
+    }
+    return ret("text", "em");
+  }
+
+  // tw underlined text
+  function twTokenUnderline(stream, state) {
+    var maybeEnd = false,
+    ch;
+    while (ch = stream.next()) {
+      if (ch == "_" && maybeEnd) {
+        state.tokenize = jsTokenBase;
+        break;
+      }
+      maybeEnd = (ch == "_");
+    }
+    return ret("text", "underlined");
+  }
+
+  // tw strike through text looks ugly
+  // change CSS if needed
+  function twTokenStrike(stream, state) {
+    var maybeEnd = false, ch;
+
+    while (ch = stream.next()) {
+      if (ch == "-" && maybeEnd) {
+        state.tokenize = jsTokenBase;
+        break;
+      }
+      maybeEnd = (ch == "-");
+    }
+    return ret("text", "strikethrough");
+  }
+
+  // macro
+  function twTokenMacro(stream, state) {
+    var ch, word, known;
+
+    if (stream.current() == '<<') {
+      return ret('brace', 'macro');
+    }
+
+    ch = stream.next();
+    if (!ch) {
+      state.tokenize = jsTokenBase;
+      return ret(ch);
+    }
+    if (ch == ">") {
+      if (stream.peek() == '>') {
+        stream.next();
+        state.tokenize = jsTokenBase;
+        return ret("brace", "macro");
+      }
+    }
+
+    stream.eatWhile(/[\w\$_]/);
+    word = stream.current();
+    known = keywords.propertyIsEnumerable(word) && keywords[word];
+
+    if (known) {
+      return ret(known.type, known.style, word);
+    }
+    else {
+      return ret("macro", null, word);
+    }
+  }
+
+  // Interface
+  return {
+    startState: function () {
+      return {
+        tokenize: jsTokenBase,
+        indented: 0,
+        level: 0
+      };
+    },
+
+    token: function (stream, state) {
+      if (stream.eatSpace()) return null;
+      var style = state.tokenize(stream, state);
+      return style;
+    },
+
+    electricChars: ""
+  };
+});
+
+CodeMirror.defineMIME("text/x-tiddlywiki", "tiddlywiki");
+});
+
+//}}}
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/index.html b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..7cd93d1b580f09f4ce12a35f68dfd3a3a327a9fb
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/index.html
@@ -0,0 +1,95 @@
+<!doctype html>
+
+<title>CodeMirror: Tiki wiki mode</title>
+<meta charset="utf-8"/>
+<link rel=stylesheet href="../../doc/docs.css">
+
+<link rel="stylesheet" href="../../lib/codemirror.css">
+<link rel="stylesheet" href="tiki.css">
+<script src="../../lib/codemirror.js"></script>
+<script src="tiki.js"></script>
+<style type="text/css">.CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}</style>
+<div id=nav>
+  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>
+
+  <ul>
+    <li><a href="../../index.html">Home</a>
+    <li><a href="../../doc/manual.html">Manual</a>
+    <li><a href="https://github.com/codemirror/codemirror">Code</a>
+  </ul>
+  <ul>
+    <li><a href="../index.html">Language modes</a>
+    <li><a class=active href="#">Tiki wiki</a>
+  </ul>
+</div>
+
+<article>
+<h2>Tiki wiki mode</h2>
+
+
+<div><textarea id="code" name="code">
+Headings
+!Header 1
+!!Header 2
+!!!Header 3
+!!!!Header 4
+!!!!!Header 5
+!!!!!!Header 6
+
+Styling
+-=titlebar=-
+^^ Box on multi
+lines
+of content^^
+__bold__
+''italic''
+===underline===
+::center::
+--Line Through--
+
+Operators
+~np~No parse~/np~
+
+Link
+[link|desc|nocache]
+
+Wiki
+((Wiki))
+((Wiki|desc))
+((Wiki|desc|timeout))
+
+Table
+||row1 col1|row1 col2|row1 col3
+row2 col1|row2 col2|row2 col3
+row3 col1|row3 col2|row3 col3||
+
+Lists:
+*bla
+**bla-1
+++continue-bla-1
+***bla-2
+++continue-bla-1
+*bla
++continue-bla
+#bla
+** tra-la-la
++continue-bla
+#bla
+
+Plugin (standard):
+{PLUGIN(attr="my attr")}
+Plugin Body
+{PLUGIN}
+
+Plugin (inline):
+{plugin attr="my attr"}
+</textarea></div>
+
+<script type="text/javascript">
+	var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
+        mode: 'tiki',
+        lineNumbers: true
+    });
+</script>
+
+</article>
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/tiki.css b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/tiki.css
new file mode 100644
index 0000000000000000000000000000000000000000..6e970fb23958b4fbc2d40947030ecd55221db5cd
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/tiki.css
@@ -0,0 +1,26 @@
+.cm-tw-syntaxerror {
+	color: #FFF;
+	background-color: #900;
+}
+
+.cm-tw-deleted {
+	text-decoration: line-through;
+}
+
+.cm-tw-header5 {
+	font-weight: bold;
+}
+.cm-tw-listitem:first-child { /*Added first child to fix duplicate padding when highlighting*/
+	padding-left: 10px;
+}
+
+.cm-tw-box {
+	border-top-width: 0px ! important;
+	border-style: solid;
+	border-width: 1px;
+	border-color: inherit;
+}
+
+.cm-tw-underline {
+	text-decoration: underline;
+}
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/tiki.js b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/tiki.js
new file mode 100644
index 0000000000000000000000000000000000000000..c90aac9ec75882d20fbac391299d805c57f35c54
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tiki/tiki.js
@@ -0,0 +1,323 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+(function(mod) {
+  if (typeof exports == "object" && typeof module == "object") // CommonJS
+    mod(require("../../lib/codemirror"));
+  else if (typeof define == "function" && define.amd) // AMD
+    define(["../../lib/codemirror"], mod);
+  else // Plain browser env
+    mod(CodeMirror);
+})(function(CodeMirror) {
+"use strict";
+
+CodeMirror.defineMode('tiki', function(config) {
+  function inBlock(style, terminator, returnTokenizer) {
+    return function(stream, state) {
+      while (!stream.eol()) {
+        if (stream.match(terminator)) {
+          state.tokenize = inText;
+          break;
+        }
+        stream.next();
+      }
+
+      if (returnTokenizer) state.tokenize = returnTokenizer;
+
+      return style;
+    };
+  }
+
+  function inLine(style) {
+    return function(stream, state) {
+      while(!stream.eol()) {
+        stream.next();
+      }
+      state.tokenize = inText;
+      return style;
+    };
+  }
+
+  function inText(stream, state) {
+    function chain(parser) {
+      state.tokenize = parser;
+      return parser(stream, state);
+    }
+
+    var sol = stream.sol();
+    var ch = stream.next();
+
+    //non start of line
+    switch (ch) { //switch is generally much faster than if, so it is used here
+    case "{": //plugin
+      stream.eat("/");
+      stream.eatSpace();
+      var tagName = "";
+      var c;
+      while ((c = stream.eat(/[^\s\u00a0=\"\'\/?(}]/))) tagName += c;
+      state.tokenize = inPlugin;
+      return "tag";
+      break;
+    case "_": //bold
+      if (stream.eat("_")) {
+        return chain(inBlock("strong", "__", inText));
+      }
+      break;
+    case "'": //italics
+      if (stream.eat("'")) {
+        // Italic text
+        return chain(inBlock("em", "''", inText));
+      }
+      break;
+    case "(":// Wiki Link
+      if (stream.eat("(")) {
+        return chain(inBlock("variable-2", "))", inText));
+      }
+      break;
+    case "[":// Weblink
+      return chain(inBlock("variable-3", "]", inText));
+      break;
+    case "|": //table
+      if (stream.eat("|")) {
+        return chain(inBlock("comment", "||"));
+      }
+      break;
+    case "-":
+      if (stream.eat("=")) {//titleBar
+        return chain(inBlock("header string", "=-", inText));
+      } else if (stream.eat("-")) {//deleted
+        return chain(inBlock("error tw-deleted", "--", inText));
+      }
+      break;
+    case "=": //underline
+      if (stream.match("==")) {
+        return chain(inBlock("tw-underline", "===", inText));
+      }
+      break;
+    case ":":
+      if (stream.eat(":")) {
+        return chain(inBlock("comment", "::"));
+      }
+      break;
+    case "^": //box
+      return chain(inBlock("tw-box", "^"));
+      break;
+    case "~": //np
+      if (stream.match("np~")) {
+        return chain(inBlock("meta", "~/np~"));
+      }
+      break;
+    }
+
+    //start of line types
+    if (sol) {
+      switch (ch) {
+      case "!": //header at start of line
+        if (stream.match('!!!!!')) {
+          return chain(inLine("header string"));
+        } else if (stream.match('!!!!')) {
+          return chain(inLine("header string"));
+        } else if (stream.match('!!!')) {
+          return chain(inLine("header string"));
+        } else if (stream.match('!!')) {
+          return chain(inLine("header string"));
+        } else {
+          return chain(inLine("header string"));
+        }
+        break;
+      case "*": //unordered list line item, or <li /> at start of line
+      case "#": //ordered list line item, or <li /> at start of line
+      case "+": //ordered list line item, or <li /> at start of line
+        return chain(inLine("tw-listitem bracket"));
+        break;
+      }
+    }
+
+    //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki
+    return null;
+  }
+
+  var indentUnit = config.indentUnit;
+
+  // Return variables for tokenizers
+  var pluginName, type;
+  function inPlugin(stream, state) {
+    var ch = stream.next();
+    var peek = stream.peek();
+
+    if (ch == "}") {
+      state.tokenize = inText;
+      //type = ch == ")" ? "endPlugin" : "selfclosePlugin"; inPlugin
+      return "tag";
+    } else if (ch == "(" || ch == ")") {
+      return "bracket";
+    } else if (ch == "=") {
+      type = "equals";
+
+      if (peek == ">") {
+        ch = stream.next();
+        peek = stream.peek();
+      }
+
+      //here we detect values directly after equal character with no quotes
+      if (!/[\'\"]/.test(peek)) {
+        state.tokenize = inAttributeNoQuote();
+      }
+      //end detect values
+
+      return "operator";
+    } else if (/[\'\"]/.test(ch)) {
+      state.tokenize = inAttribute(ch);
+      return state.tokenize(stream, state);
+    } else {
+      stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
+      return "keyword";
+    }
+  }
+
+  function inAttribute(quote) {
+    return function(stream, state) {
+      while (!stream.eol()) {
+        if (stream.next() == quote) {
+          state.tokenize = inPlugin;
+          break;
+        }
+      }
+      return "string";
+    };
+  }
+
+  function inAttributeNoQuote() {
+    return function(stream, state) {
+      while (!stream.eol()) {
+        var ch = stream.next();
+        var peek = stream.peek();
+        if (ch == " " || ch == "," || /[ )}]/.test(peek)) {
+      state.tokenize = inPlugin;
+      break;
+    }
+  }
+  return "string";
+};
+                     }
+
+var curState, setStyle;
+function pass() {
+  for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);
+}
+
+function cont() {
+  pass.apply(null, arguments);
+  return true;
+}
+
+function pushContext(pluginName, startOfLine) {
+  var noIndent = curState.context && curState.context.noIndent;
+  curState.context = {
+    prev: curState.context,
+    pluginName: pluginName,
+    indent: curState.indented,
+    startOfLine: startOfLine,
+    noIndent: noIndent
+  };
+}
+
+function popContext() {
+  if (curState.context) curState.context = curState.context.prev;
+}
+
+function element(type) {
+  if (type == "openPlugin") {curState.pluginName = pluginName; return cont(attributes, endplugin(curState.startOfLine));}
+  else if (type == "closePlugin") {
+    var err = false;
+    if (curState.context) {
+      err = curState.context.pluginName != pluginName;
+      popContext();
+    } else {
+      err = true;
+    }
+    if (err) setStyle = "error";
+    return cont(endcloseplugin(err));
+  }
+  else if (type == "string") {
+    if (!curState.context || curState.context.name != "!cdata") pushContext("!cdata");
+    if (curState.tokenize == inText) popContext();
+    return cont();
+  }
+  else return cont();
+}
+
+function endplugin(startOfLine) {
+  return function(type) {
+    if (
+      type == "selfclosePlugin" ||
+        type == "endPlugin"
+    )
+      return cont();
+    if (type == "endPlugin") {pushContext(curState.pluginName, startOfLine); return cont();}
+    return cont();
+  };
+}
+
+function endcloseplugin(err) {
+  return function(type) {
+    if (err) setStyle = "error";
+    if (type == "endPlugin") return cont();
+    return pass();
+  };
+}
+
+function attributes(type) {
+  if (type == "keyword") {setStyle = "attribute"; return cont(attributes);}
+  if (type == "equals") return cont(attvalue, attributes);
+  return pass();
+}
+function attvalue(type) {
+  if (type == "keyword") {setStyle = "string"; return cont();}
+  if (type == "string") return cont(attvaluemaybe);
+  return pass();
+}
+function attvaluemaybe(type) {
+  if (type == "string") return cont(attvaluemaybe);
+  else return pass();
+}
+return {
+  startState: function() {
+    return {tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null};
+  },
+  token: function(stream, state) {
+    if (stream.sol()) {
+      state.startOfLine = true;
+      state.indented = stream.indentation();
+    }
+    if (stream.eatSpace()) return null;
+
+    setStyle = type = pluginName = null;
+    var style = state.tokenize(stream, state);
+    if ((style || type) && style != "comment") {
+      curState = state;
+      while (true) {
+        var comb = state.cc.pop() || element;
+        if (comb(type || style)) break;
+      }
+    }
+    state.startOfLine = false;
+    return setStyle || style;
+  },
+  indent: function(state, textAfter) {
+    var context = state.context;
+    if (context && context.noIndent) return 0;
+    if (context && /^{\//.test(textAfter))
+        context = context.prev;
+        while (context && !context.startOfLine)
+          context = context.prev;
+        if (context) return context.indent + indentUnit;
+        else return 0;
+       },
+    electricChars: "/"
+  };
+});
+
+CodeMirror.defineMIME("text/tiki", "tiki");
+
+});
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/toml/index.html b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/toml/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..477c561d7e276e315c0c0a3b749d854902e6ad66
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/toml/index.html
@@ -0,0 +1,73 @@
+<!doctype html>
+
+<title>CodeMirror: TOML Mode</title>
+<meta charset="utf-8"/>
+<link rel=stylesheet href="../../doc/docs.css">
+
+<link rel="stylesheet" href="../../lib/codemirror.css">
+<script src="../../lib/codemirror.js"></script>
+<script src="toml.js"></script>
+<style type="text/css">.CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}</style>
+<div id=nav>
+  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>
+
+  <ul>
+    <li><a href="../../index.html">Home</a>
+    <li><a href="../../doc/manual.html">Manual</a>
+    <li><a href="https://github.com/codemirror/codemirror">Code</a>
+  </ul>
+  <ul>
+    <li><a href="../index.html">Language modes</a>
+    <li><a class=active href="#">TOML Mode</a>
+  </ul>
+</div>
+
+<article>
+<h2>TOML Mode</h2>
+<form><textarea id="code" name="code">
+# This is a TOML document. Boom.
+
+title = "TOML Example"
+
+[owner]
+name = "Tom Preston-Werner"
+organization = "GitHub"
+bio = "GitHub Cofounder &amp; CEO\nLikes tater tots and beer."
+dob = 1979-05-27T07:32:00Z # First class dates? Why not?
+
+[database]
+server = "192.168.1.1"
+ports = [ 8001, 8001, 8002 ]
+connection_max = 5000
+enabled = true
+
+[servers]
+
+  # You can indent as you please. Tabs or spaces. TOML don't care.
+  [servers.alpha]
+  ip = "10.0.0.1"
+  dc = "eqdc10"
+
+  [servers.beta]
+  ip = "10.0.0.2"
+  dc = "eqdc10"
+
+[clients]
+data = [ ["gamma", "delta"], [1, 2] ]
+
+# Line breaks are OK when inside arrays
+hosts = [
+  "alpha",
+  "omega"
+]
+</textarea></form>
+    <script>
+      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
+        mode: {name: "toml"},
+        lineNumbers: true
+      });
+    </script>
+    <h3>The TOML Mode</h3>
+      <p> Created by Forbes Lindesay.</p>
+    <p><strong>MIME type defined:</strong> <code>text/x-toml</code>.</p>
+  </article>
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/toml/toml.js b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/toml/toml.js
new file mode 100644
index 0000000000000000000000000000000000000000..baeca15568001854b1f323932858d3cd343f732b
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/toml/toml.js
@@ -0,0 +1,88 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+(function(mod) {
+  if (typeof exports == "object" && typeof module == "object") // CommonJS
+    mod(require("../../lib/codemirror"));
+  else if (typeof define == "function" && define.amd) // AMD
+    define(["../../lib/codemirror"], mod);
+  else // Plain browser env
+    mod(CodeMirror);
+})(function(CodeMirror) {
+"use strict";
+
+CodeMirror.defineMode("toml", function () {
+  return {
+    startState: function () {
+      return {
+        inString: false,
+        stringType: "",
+        lhs: true,
+        inArray: 0
+      };
+    },
+    token: function (stream, state) {
+      //check for state changes
+      if (!state.inString && ((stream.peek() == '"') || (stream.peek() == "'"))) {
+        state.stringType = stream.peek();
+        stream.next(); // Skip quote
+        state.inString = true; // Update state
+      }
+      if (stream.sol() && state.inArray === 0) {
+        state.lhs = true;
+      }
+      //return state
+      if (state.inString) {
+        while (state.inString && !stream.eol()) {
+          if (stream.peek() === state.stringType) {
+            stream.next(); // Skip quote
+            state.inString = false; // Clear flag
+          } else if (stream.peek() === '\\') {
+            stream.next();
+            stream.next();
+          } else {
+            stream.match(/^.[^\\\"\']*/);
+          }
+        }
+        return state.lhs ? "property string" : "string"; // Token style
+      } else if (state.inArray && stream.peek() === ']') {
+        stream.next();
+        state.inArray--;
+        return 'bracket';
+      } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {
+        stream.next();//skip closing ]
+        // array of objects has an extra open & close []
+        if (stream.peek() === ']') stream.next();
+        return "atom";
+      } else if (stream.peek() === "#") {
+        stream.skipToEnd();
+        return "comment";
+      } else if (stream.eatSpace()) {
+        return null;
+      } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {
+        return "property";
+      } else if (state.lhs && stream.peek() === "=") {
+        stream.next();
+        state.lhs = false;
+        return null;
+      } else if (!state.lhs && stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)) {
+        return 'atom'; //date
+      } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {
+        return 'atom';
+      } else if (!state.lhs && stream.peek() === '[') {
+        state.inArray++;
+        stream.next();
+        return 'bracket';
+      } else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
+        return 'number';
+      } else if (!stream.eatSpace()) {
+        stream.next();
+      }
+      return null;
+    }
+  };
+});
+
+CodeMirror.defineMIME('text/x-toml', 'toml');
+
+});
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tornado/index.html b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tornado/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..af072fa6471998c5bb184d2a774c487db9c651de
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tornado/index.html
@@ -0,0 +1,63 @@
+<!doctype html>
+
+<title>CodeMirror: Tornado template mode</title>
+<meta charset="utf-8"/>
+<link rel=stylesheet href="../../doc/docs.css">
+
+<link rel="stylesheet" href="../../lib/codemirror.css">
+<script src="../../lib/codemirror.js"></script>
+<script src="../../addon/mode/overlay.js"></script>
+<script src="../xml/xml.js"></script>
+<script src="../htmlmixed/htmlmixed.js"></script>
+<script src="tornado.js"></script>
+<style type="text/css">.CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}</style>
+<div id=nav>
+  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>
+
+  <ul>
+    <li><a href="../../index.html">Home</a>
+    <li><a href="../../doc/manual.html">Manual</a>
+    <li><a href="https://github.com/marijnh/codemirror">Code</a>
+  </ul>
+  <ul>
+    <li><a href="../index.html">Language modes</a>
+    <li><a class=active href="#">Tornado</a>
+  </ul>
+</div>
+
+<article>
+<h2>Tornado template mode</h2>
+<form><textarea id="code" name="code">
+<!doctype html>
+<html>
+    <head>
+        <title>My Tornado web application</title>
+    </head>
+    <body class="gray-bg">
+        <h1>
+            {{ title }}
+        </h1>
+        <ul class="my-list">
+            {% for item in items %}
+                <li>{% item.name %}</li>
+            {% empty %}
+                <li>You have no items in your list.</li>
+            {% end %}
+        </ul>
+    </body>
+</html>
+</textarea></form>
+
+    <script>
+      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
+        lineNumbers: true,
+        mode: "tornado",
+        indentUnit: 4,
+        indentWithTabs: true
+      });
+    </script>
+
+    <p>Mode for HTML with embedded Tornado template markup.</p>
+
+    <p><strong>MIME types defined:</strong> <code>text/x-tornado</code></p>
+  </article>
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tornado/tornado.js b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tornado/tornado.js
new file mode 100644
index 0000000000000000000000000000000000000000..dbfbc34890b72b63b10ef1d002cd396a3f4626ab
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/tornado/tornado.js
@@ -0,0 +1,68 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+(function(mod) {
+  if (typeof exports == "object" && typeof module == "object") // CommonJS
+    mod(require("../../lib/codemirror"), require("../htmlmixed/htmlmixed"),
+        require("../../addon/mode/overlay"));
+  else if (typeof define == "function" && define.amd) // AMD
+    define(["../../lib/codemirror", "../htmlmixed/htmlmixed",
+            "../../addon/mode/overlay"], mod);
+  else // Plain browser env
+    mod(CodeMirror);
+})(function(CodeMirror) {
+  "use strict";
+
+  CodeMirror.defineMode("tornado:inner", function() {
+    var keywords = ["and","as","assert","autoescape","block","break","class","comment","context",
+                    "continue","datetime","def","del","elif","else","end","escape","except",
+                    "exec","extends","false","finally","for","from","global","if","import","in",
+                    "include","is","json_encode","lambda","length","linkify","load","module",
+                    "none","not","or","pass","print","put","raise","raw","return","self","set",
+                    "squeeze","super","true","try","url_escape","while","with","without","xhtml_escape","yield"];
+    keywords = new RegExp("^((" + keywords.join(")|(") + "))\\b");
+
+    function tokenBase (stream, state) {
+      stream.eatWhile(/[^\{]/);
+      var ch = stream.next();
+      if (ch == "{") {
+        if (ch = stream.eat(/\{|%|#/)) {
+          state.tokenize = inTag(ch);
+          return "tag";
+        }
+      }
+    }
+    function inTag (close) {
+      if (close == "{") {
+        close = "}";
+      }
+      return function (stream, state) {
+        var ch = stream.next();
+        if ((ch == close) && stream.eat("}")) {
+          state.tokenize = tokenBase;
+          return "tag";
+        }
+        if (stream.match(keywords)) {
+          return "keyword";
+        }
+        return close == "#" ? "comment" : "string";
+      };
+    }
+    return {
+      startState: function () {
+        return {tokenize: tokenBase};
+      },
+      token: function (stream, state) {
+        return state.tokenize(stream, state);
+      }
+    };
+  });
+
+  CodeMirror.defineMode("tornado", function(config) {
+    var htmlBase = CodeMirror.getMode(config, "text/html");
+    var tornadoInner = CodeMirror.getMode(config, "tornado:inner");
+    return CodeMirror.overlayMode(htmlBase, tornadoInner);
+  });
+
+  CodeMirror.defineMIME("text/x-tornado", "tornado");
+});
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/turtle/index.html b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/turtle/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..94826912d906d9e784d099381d5791c57ef64246
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/turtle/index.html
@@ -0,0 +1,50 @@
+<!doctype html>
+
+<title>CodeMirror: Turtle mode</title>
+<meta charset="utf-8"/>
+<link rel=stylesheet href="../../doc/docs.css">
+
+<link rel="stylesheet" href="../../lib/codemirror.css">
+<script src="../../lib/codemirror.js"></script>
+<script src="turtle.js"></script>
+<style>.CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}</style>
+<div id=nav>
+  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>
+
+  <ul>
+    <li><a href="../../index.html">Home</a>
+    <li><a href="../../doc/manual.html">Manual</a>
+    <li><a href="https://github.com/codemirror/codemirror">Code</a>
+  </ul>
+  <ul>
+    <li><a href="../index.html">Language modes</a>
+    <li><a class=active href="#">Turtle</a>
+  </ul>
+</div>
+
+<article>
+<h2>Turtle mode</h2>
+<form><textarea id="code" name="code">
+@prefix foaf: <http://xmlns.com/foaf/0.1/> .
+@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
+@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
+
+<http://purl.org/net/bsletten>
+    a foaf:Person;
+    foaf:interest <http://www.w3.org/2000/01/sw/>;
+    foaf:based_near [
+        geo:lat "34.0736111" ;
+        geo:lon "-118.3994444"
+   ]
+
+</textarea></form>
+    <script>
+      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
+        mode: "text/turtle",
+        matchBrackets: true
+      });
+    </script>
+
+    <p><strong>MIME types defined:</strong> <code>text/turtle</code>.</p>
+
+  </article>
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/turtle/turtle.js b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/turtle/turtle.js
new file mode 100644
index 0000000000000000000000000000000000000000..0988f0a442ae8a8340bc6b55448e885c516d7793
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/turtle/turtle.js
@@ -0,0 +1,162 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+(function(mod) {
+  if (typeof exports == "object" && typeof module == "object") // CommonJS
+    mod(require("../../lib/codemirror"));
+  else if (typeof define == "function" && define.amd) // AMD
+    define(["../../lib/codemirror"], mod);
+  else // Plain browser env
+    mod(CodeMirror);
+})(function(CodeMirror) {
+"use strict";
+
+CodeMirror.defineMode("turtle", function(config) {
+  var indentUnit = config.indentUnit;
+  var curPunc;
+
+  function wordRegexp(words) {
+    return new RegExp("^(?:" + words.join("|") + ")$", "i");
+  }
+  var ops = wordRegexp([]);
+  var keywords = wordRegexp(["@prefix", "@base", "a"]);
+  var operatorChars = /[*+\-<>=&|]/;
+
+  function tokenBase(stream, state) {
+    var ch = stream.next();
+    curPunc = null;
+    if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
+      stream.match(/^[^\s\u00a0>]*>?/);
+      return "atom";
+    }
+    else if (ch == "\"" || ch == "'") {
+      state.tokenize = tokenLiteral(ch);
+      return state.tokenize(stream, state);
+    }
+    else if (/[{}\(\),\.;\[\]]/.test(ch)) {
+      curPunc = ch;
+      return null;
+    }
+    else if (ch == "#") {
+      stream.skipToEnd();
+      return "comment";
+    }
+    else if (operatorChars.test(ch)) {
+      stream.eatWhile(operatorChars);
+      return null;
+    }
+    else if (ch == ":") {
+          return "operator";
+        } else {
+      stream.eatWhile(/[_\w\d]/);
+      if(stream.peek() == ":") {
+        return "variable-3";
+      } else {
+             var word = stream.current();
+
+             if(keywords.test(word)) {
+                        return "meta";
+             }
+
+             if(ch >= "A" && ch <= "Z") {
+                    return "comment";
+                 } else {
+                        return "keyword";
+                 }
+      }
+      var word = stream.current();
+      if (ops.test(word))
+        return null;
+      else if (keywords.test(word))
+        return "meta";
+      else
+        return "variable";
+    }
+  }
+
+  function tokenLiteral(quote) {
+    return function(stream, state) {
+      var escaped = false, ch;
+      while ((ch = stream.next()) != null) {
+        if (ch == quote && !escaped) {
+          state.tokenize = tokenBase;
+          break;
+        }
+        escaped = !escaped && ch == "\\";
+      }
+      return "string";
+    };
+  }
+
+  function pushContext(state, type, col) {
+    state.context = {prev: state.context, indent: state.indent, col: col, type: type};
+  }
+  function popContext(state) {
+    state.indent = state.context.indent;
+    state.context = state.context.prev;
+  }
+
+  return {
+    startState: function() {
+      return {tokenize: tokenBase,
+              context: null,
+              indent: 0,
+              col: 0};
+    },
+
+    token: function(stream, state) {
+      if (stream.sol()) {
+        if (state.context && state.context.align == null) state.context.align = false;
+        state.indent = stream.indentation();
+      }
+      if (stream.eatSpace()) return null;
+      var style = state.tokenize(stream, state);
+
+      if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
+        state.context.align = true;
+      }
+
+      if (curPunc == "(") pushContext(state, ")", stream.column());
+      else if (curPunc == "[") pushContext(state, "]", stream.column());
+      else if (curPunc == "{") pushContext(state, "}", stream.column());
+      else if (/[\]\}\)]/.test(curPunc)) {
+        while (state.context && state.context.type == "pattern") popContext(state);
+        if (state.context && curPunc == state.context.type) popContext(state);
+      }
+      else if (curPunc == "." && state.context && state.context.type == "pattern") popContext(state);
+      else if (/atom|string|variable/.test(style) && state.context) {
+        if (/[\}\]]/.test(state.context.type))
+          pushContext(state, "pattern", stream.column());
+        else if (state.context.type == "pattern" && !state.context.align) {
+          state.context.align = true;
+          state.context.col = stream.column();
+        }
+      }
+
+      return style;
+    },
+
+    indent: function(state, textAfter) {
+      var firstChar = textAfter && textAfter.charAt(0);
+      var context = state.context;
+      if (/[\]\}]/.test(firstChar))
+        while (context && context.type == "pattern") context = context.prev;
+
+      var closing = context && firstChar == context.type;
+      if (!context)
+        return 0;
+      else if (context.type == "pattern")
+        return context.col;
+      else if (context.align)
+        return context.col + (closing ? 0 : 1);
+      else
+        return context.indent + (closing ? 0 : indentUnit);
+    },
+
+    lineComment: "#"
+  };
+});
+
+CodeMirror.defineMIME("text/turtle", "turtle");
+
+});
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/vb/index.html b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/vb/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..116dd2e659f9137057560e1d7f21b56d62663ca6
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/vb/index.html
@@ -0,0 +1,102 @@
+<!doctype html>
+
+<title>CodeMirror: VB.NET mode</title>
+<meta charset="utf-8"/>
+<link rel=stylesheet href="../../doc/docs.css">
+
+<link rel="stylesheet" href="../../lib/codemirror.css">
+<link href="http://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet" type="text/css">
+<script src="../../lib/codemirror.js"></script>
+<script src="vb.js"></script>
+<script type="text/javascript" src="../../addon/runmode/runmode.js"></script>
+<style>
+      .CodeMirror {border: 1px solid #aaa; height:210px; height: auto;}
+      .CodeMirror-scroll { overflow-x: auto; overflow-y: hidden;}
+      .CodeMirror pre { font-family: Inconsolata; font-size: 14px}
+    </style>
+<div id=nav>
+  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>
+
+  <ul>
+    <li><a href="../../index.html">Home</a>
+    <li><a href="../../doc/manual.html">Manual</a>
+    <li><a href="https://github.com/codemirror/codemirror">Code</a>
+  </ul>
+  <ul>
+    <li><a href="../index.html">Language modes</a>
+    <li><a class=active href="#">VB.NET</a>
+  </ul>
+</div>
+
+<article>
+<h2>VB.NET mode</h2>
+
+<script type="text/javascript">
+function test(golden, text) {
+  var ok = true;
+  var i = 0;
+  function callback(token, style, lineNo, pos){
+		//console.log(String(token) + " " + String(style) + " " + String(lineNo) + " " + String(pos));
+    var result = [String(token), String(style)];
+    if (golden[i][0] != result[0] || golden[i][1] != result[1]){
+      return "Error, expected: " + String(golden[i]) + ", got: " + String(result);
+      ok = false;
+    }
+    i++;
+  }
+  CodeMirror.runMode(text, "text/x-vb",callback);
+
+  if (ok) return "Tests OK";
+}
+function testTypes() {
+  var golden = [['Integer','keyword'],[' ','null'],['Float','keyword']]
+  var text =  "Integer Float";
+  return test(golden,text);
+}
+function testIf(){
+  var golden = [['If','keyword'],[' ','null'],['True','keyword'],[' ','null'],['End','keyword'],[' ','null'],['If','keyword']];
+  var text = 'If True End If';
+  return test(golden, text);
+}
+function testDecl(){
+   var golden = [['Dim','keyword'],[' ','null'],['x','variable'],[' ','null'],['as','keyword'],[' ','null'],['Integer','keyword']];
+   var text = 'Dim x as Integer';
+   return test(golden, text);
+}
+function testAll(){
+  var result = "";
+
+  result += testTypes() + "\n";
+  result += testIf() + "\n";
+  result += testDecl() + "\n";
+  return result;
+
+}
+function initText(editor) {
+  var content = 'Class rocket\nPrivate quality as Double\nPublic Sub launch() as String\nif quality > 0.8\nlaunch = "Successful"\nElse\nlaunch = "Failed"\nEnd If\nEnd sub\nEnd class\n';
+  editor.setValue(content);
+  for (var i =0; i< editor.lineCount(); i++) editor.indentLine(i);
+}
+function init() {
+    editor = CodeMirror.fromTextArea(document.getElementById("solution"), {
+        lineNumbers: true,
+        mode: "text/x-vb",
+        readOnly: false
+    });
+    runTest();
+}
+function runTest() {
+	document.getElementById('testresult').innerHTML = testAll();
+  initText(editor);
+
+}
+document.body.onload = init;
+</script>
+
+  <div id="edit">
+  <textarea style="width:95%;height:200px;padding:5px;" name="solution" id="solution" ></textarea>
+  </div>
+  <pre id="testresult"></pre>
+  <p>MIME type defined: <code>text/x-vb</code>.</p>
+
+</article>
diff --git a/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/vb/vb.js b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/vb/vb.js
new file mode 100644
index 0000000000000000000000000000000000000000..902203e0c03e9d3c94fb8453919e2ebf23b6725f
--- /dev/null
+++ b/qj-official-web/src/main/webapp/static/js/plugins/codemirror/mode/vb/vb.js
@@ -0,0 +1,274 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+(function(mod) {
+  if (typeof exports == "object" && typeof module == "object") // CommonJS
+    mod(require("../../lib/codemirror"));
+  else if (typeof define == "function" && define.amd) // AMD
+    define(["../../lib/codemirror"], mod);
+  else // Plain browser env
+    mod(CodeMirror);
+})(function(CodeMirror) {
+"use strict";
+
+CodeMirror.defineMode("vb", function(conf, parserConf) {
+    var ERRORCLASS = 'error';
+
+    function wordRegexp(words) {
+        return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
+    }
+
+    var singleOperators = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
+    var singleDelimiters = new RegExp('^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]');
+    var doubleOperators = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
+    var doubleDelimiters = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
+    var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
+    var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");
+
+    var openingKeywords = ['class','module', 'sub','enum','select','while','if','function',  'get','set','property', 'try'];
+    var middleKeywords = ['else','elseif','case', 'catch'];
+    var endKeywords = ['next','loop'];
+
+    var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'in']);
+    var commonkeywords = ['as', 'dim', 'break',  'continue','optional', 'then',  'until',
+                          'goto', 'byval','byref','new','handles','property', 'return',
+                          'const','private', 'protected', 'friend', 'public', 'shared', 'static', 'true','false'];
+    var commontypes = ['integer','string','double','decimal','boolean','short','char', 'float','single'];
+
+    var keywords = wordRegexp(commonkeywords);
+    var types = wordRegexp(commontypes);
+    var stringPrefixes = '"';
+
+    var opening = wordRegexp(openingKeywords);
+    var middle = wordRegexp(middleKeywords);
+    var closing = wordRegexp(endKeywords);
+    var doubleClosing = wordRegexp(['end']);
+    var doOpening = wordRegexp(['do']);
+
+    var indentInfo = null;
+
+
+
+
+    function indent(_stream, state) {
+      state.currentIndent++;
+    }
+
+    function dedent(_stream, state) {
+      state.currentIndent--;
+    }
+    // tokenizers
+    function tokenBase(stream, state) {
+        if (stream.eatSpace()) {
+            return null;
+        }
+
+        var ch = stream.peek();
+
+        // Handle Comments
+        if (ch === "'") {
+            stream.skipToEnd();
+            return 'comment';
+        }
+
+
+        // Handle Number Literals
+        if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
+            var floatLiteral = false;
+            // Floats
+            if (stream.match(/^\d*\.\d+F?/i)) { floatLiteral = true; }
+            else if (stream.match(/^\d+\.\d*F?/)) { floatLiteral = true; }
+            else if (str